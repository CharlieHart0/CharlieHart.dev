[{"content":"Project Summary My undergraduate dissertation project was to create and optimise a voxel based rendering and world generation system. Inspiration for this project was clearly drawn from Minecraft, one of the most popular games of all time, but also from games such as Astroneer - which uses a voxel system at the core of its player destructible world.\nI used Unity for this project, and created a voxel rendering system which was able to generate a set of triangular meshes, with the correct textures applied, to represent an inputted three dimensional array of blocks, which had been generated using smooth noise functions.\nOptimisations were then added to the project, and their impacts were evaluated. It was found that using object pooling for face meshes increased terrain load speeds by an average of 30.7%, and that \u0026lsquo;internal face culling\u0026rsquo; - that is, generating meshes only for block faces deemed to be exposed to the \u0026lsquo;air\u0026rsquo; in the game world - increased frame rates substantially, by over 1,700%, and allowed significantly larger voxel worlds to be rendered.\nPictured: A screenshot of a 112x48x112 voxel world, using the world generation system to create both hills and caves.\nDissertation Dissertation PDF document\nThe dissertation document goes into significantly more detail about this project, many details are omitted in this post to keep it an appropriate length.\nTry It! Dissertation Github Repository - Contains the excecutable project, recorded test data, and the Unity project files, including all written code.\nRequired Device: Windows PC\nRecommended: At least 8GB of RAM, and a dedicated GPU with at least 2GB of VRAM.\nDevelopment Voxel Rendering Each voxel - wether empty or a solid block - has a corresponding Unity gameobject in the respective voxel position within the world, and when a chunk\u0026rsquo;s RenderChunk() function is called, it calls functions within each voxel object to generate the face meshes required to render the scene.\nThen, the correct block material is applied, with each block\u0026rsquo;s material containing 6 textures to be applied, one for each direction on the world\u0026rsquo;s 3D axis, both positive and negative. These textures are stored on a single image, and loaded into memory together, in the same way a sprite atlas may be used for 2D graphics.\nWorld Generation Terrain is generated in a fixed radius around the camera, in a square shape. As the camera moves on either the X or Z axis, more chunks of terrain are generated, and the chunks which are now outside the specified render distance are removed.\nThe world generation algorithm uses a seed to generate worlds, so that the same world could be used when evaluating the effectiveness of optimisations. For each chunk, a set of nested Lists are used to store block information, one for each axis.\nI realise that this is far from optimal, as reading and writing to lists is much slower than using an array, and there will be a significant amount of repeated data here, for example the approximately 50% of the game world consisting of stone blocks. It may be worth investigating ways to optimise this, as terrain generation was significantly slower than I\u0026rsquo;d like it to be.\nAlgorithm Each voxel\u0026rsquo;s position is used as an input to the evaluateBlock() function, which returns the ID of the block which has been generated at that position. This function completes the following steps:\nIf the Y position is 0, a block of lava is generated, so that any generated caves are guaranteed to have solid blocks at the bottom, and are not open to the void.\nThe height of the hills at this position on the X and Z axis is calculated. Perlin noise is sampled here, and is used to interpolate between the given minimum and maximum hill heights in the world config. A Unity AnimationCurve is used to modify the gradient of hills visually inside the Unity editor.\nCaves are generated. Three dimensional Perlin noise is processed by comparing the square of a sampled value to a threshold value, in order to turn the float samples into boolean values. The samples which evaluate to true here are then set to air blocks, carving holes into the game world.\nFuture Work Areas of future work include:\nVariations of block shapes, such as half blocks, ramps, window panes etc.\nVariations of block shading, such as semi transparent blocks like glass, leaves, windows, or water blocks which could add post processing effects to the screen\nA voxel lighting system could be added, such that some blocks could emit light, with the light attenuating over a distance.\nA system to save and import world configurations, so that custom worlds could be displayed, for example a voxel model instead of a naturally generated world.\nAsynchronous terrain generation could be implemented, or the terrain generation could be further optimised, so that the generation of terrain does not cause the game to freeze.\n","permalink":"https://charliehart.dev/3d/voxel-world-diss-en/","summary":"Project Summary My undergraduate dissertation project was to create and optimise a voxel based rendering and world generation system. Inspiration for this project was clearly drawn from Minecraft, one of the most popular games of all time, but also from games such as Astroneer - which uses a voxel system at the core of its player destructible world.\nI used Unity for this project, and created a voxel rendering system which was able to generate a set of triangular meshes, with the correct textures applied, to represent an inputted three dimensional array of blocks, which had been generated using smooth noise functions.","title":"Voxel Rendering and World Generation System"},{"content":"Project Summary Double-Barrelled Doppelgänger (DBD) was my entry to Mini Jam 117, a 72 hour gamejam that occurs every two weeks on Itch.io. The theme was \u0026lsquo;Ghosts\u0026rsquo;, as the jam took place in October 2022, near halloween.\nThe additional limitation for the jam\u0026rsquo;s entries was \u0026lsquo;Shotgun as a Mechanic\u0026rsquo;, and so DBD features a noisemaker toy shotgun as one of it\u0026rsquo;s core mechanics.\nPlay Game Double-Barreled Doppelgänger on Itch.io\nRequired Device: Windows PC\nGame Mechanics In DBD, you play as a ghost in a haunted mansion. You must escape from a team of ghostbusters who are trying to kill you, and who run towards the player to suck them into their vacuum packs.\nAs the ghost, you have no weapons or tools besides a single toy shotgun, which is able to make loud noises to scare the ghostbusters away, but will not kill them. You also have the ability to turn invisible for a short period of time.\nThe player has to both lure and scare away the ghostbusters, in order to defeat them using environmental hazards such as spikes.\nDevelopment In DBD, there are hidden trigger volumes which cause events to occur, such as torches lighting up to show the player hints as they progress through the levels. In order for this to work, I used UnityActions, a form of delegation in the Unity game engine. Each trigger zone can be assigned a UnityAction to call when the player enters the zone, and this UnityAction can in turn call several functions. This was essential in order to create trigger zones with varying behaviour in the short time frame I had to develop the game.\nRealtime lighting was used in the 2D scenes of the game, so that the player character\u0026rsquo;s torch could be used to explore the levels, and fit the halloween theme. This presented a few challenges, such as ambient lighting. The ambient lighting in the game was originally much brighter, but had to be darkened so that the other light sources in the game cast strong shadows, as this was one of the concepts that I really wanted in the game.\nSo that the player was still visible, a very weak point light was attached to the player, as the cone of light from the torch does not include the player\u0026rsquo;s position.\nGamejam Results 192 entries were submitted to Mini Jam 117, and DBD came in fourth place! Though I had experience working on personal projects before, this was my first time competing in a gamejam, and I was very happy to recieve many positive and constructive reviews from other contestants on Itch.io\n","permalink":"https://charliehart.dev/2d/doppelganger-en/","summary":"Project Summary Double-Barrelled Doppelgänger (DBD) was my entry to Mini Jam 117, a 72 hour gamejam that occurs every two weeks on Itch.io. The theme was \u0026lsquo;Ghosts\u0026rsquo;, as the jam took place in October 2022, near halloween.\nThe additional limitation for the jam\u0026rsquo;s entries was \u0026lsquo;Shotgun as a Mechanic\u0026rsquo;, and so DBD features a noisemaker toy shotgun as one of it\u0026rsquo;s core mechanics.\nPlay Game Double-Barreled Doppelgänger on Itch.io\nRequired Device: Windows PC","title":"Mini Jam 117- Double-Barrelled Doppelgänger"},{"content":" Project Summary The Language Game is a multiple choice quiz game made in Unity, inspired partly by the BBC quiz show \u0026ldquo;Richard Osman\u0026rsquo;s House of Games\u0026rdquo;. In the language round of the show, contestants are presented with a multiple choice question, with both the question and all four answers shown in a random foreign language.\nExpanding upon this concept, my game allows the player to also correctly guess the language in which the question is being asked, in order to gain bonus points.\nAs someone with a hobby in linguistics and language learning, I enjoy learning vocabulary and recognising patterns in foreign languages, and so there are 17 different languages available in the game, so that everybody is able to play with a set of languages they are unfamiliar with.\nDownload Google Play Store Page\nRequired Device: Android device running Android 5.1 or higher\nDevelopment Unity Graphs Translation As the game features 17 different playable languages, I had to look elsewhere for translations, for the questions, answers, and localisation in the game.\nI wrote a python script to search through a JSON file containing everything to be translated in English, and use Google\u0026rsquo;s Translate API to retrieve translations for each element.\nQuestions had to be carefully worded, as to remove as much ambiguity as possible, as many phrases do not translate directly into other languages.\nWhere possible, I had friends check the translations in their languages for errors, though some are likely to remain.\nGoogle Play Store In-App Purchases Although this game is free to play, I included an optional one time purchasable \u0026ldquo;Premium Version\u0026rdquo; upgrade for about GBP £2.00, which would disable adverts in game (shown once per 5 or so games), and provide a further 150 or so questions to the player, with more to be added every so often, for free to users who have bought the upgrade.\nI purposefully made the upgrade optional, and opting to play the game for free does not worsen the player experience, and is intended for the few players who really enjoy the game and want more questions, after having played the base game enough to need more questions.\nPublishing This was my first game made for Android, and so I had to go through the developer registration process for the Google Play Store in order to publish the game.\nI also had to create pictures and icons for the game\u0026rsquo;s Play Store page, something I had not done before. I used Canva, as it came with a handful of presets I could use to make a store listing that looked pretty good!\nFuture Work Unity Localisation system For all the menus and UI in the game, I used my own localisation system, reading the name of text objects in the scene, and reading from the language\u0026rsquo;s JSON file to find the string(s) needed. While this does work, it is pretty limited, and cannot replace select substrings with their localised versions. In the future, I\u0026rsquo;d like to explore Unity\u0026rsquo;s localisation system, to see what it offers.\n","permalink":"https://charliehart.dev/2d/language-game-en/","summary":"Project Summary The Language Game is a multiple choice quiz game made in Unity, inspired partly by the BBC quiz show \u0026ldquo;Richard Osman\u0026rsquo;s House of Games\u0026rdquo;. In the language round of the show, contestants are presented with a multiple choice question, with both the question and all four answers shown in a random foreign language.\nExpanding upon this concept, my game allows the player to also correctly guess the language in which the question is being asked, in order to gain bonus points.","title":"The Language Game"}]